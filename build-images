#!/bin/bash

set -e

cd "$( dirname "$0" )"
source config

LOCKFILE='/tmp/build-images.lock'

function die()
{
    echo "FATAL: $*"
    exit 1
}

function check_lock()
{
    set +e
    ( set -o noclobber; echo "$$" > "$LOCKFILE" ) 2> /dev/null
    [[ ! -d "/proc/$(< "$LOCKFILE" )" ]] && rm "$LOCKFILE"
    ( set -o noclobber; echo "$$" > "$LOCKFILE" ) 2> /dev/null
    [[ "$(< "$LOCKFILE" )" != "$$" ]] && exit
    set -e
}

function remove_lock()
{
    rm -f "$LOCKFILE"
}

function build()
{
    local branch="$1"
    local tag="$2"

    $SIMULATE_BUILD git checkout --force "$branch"
    for patch in "$PATCH_DIR"/*.patch; do
        echo "Applying $patch"
        $SIMULATE_BUILD patch -i "$patch" -p1
    done
    $SIMULATE_BUILD docker build --rm -t "$IMAGE_NAME:$tag" .
    $SIMULATE_BUILD docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
    $SIMULATE_BUILD docker push "$IMAGE_NAME:$tag"
}

check_lock

echo "== Starting at $( date ) ====================="

[[ -n "$GIT_DIR" ]] || die "GIT_DIR not set"
[[ -n "$BASE_DIR" ]] || die "BASE_DIR not set"
[[ -n "$IMAGE_NAME" ]] || die "IMAGE_NAME not set"
[[ -n "$DOCKER_USERNAME" ]] || die "DOCKER_USERNAME not set"
[[ -n "$DOCKER_PASSWORD" ]] || die "DOCKER_PASSWORD not set"

STATE_DIR="$BASE_DIR/state"
PATCH_DIR="$BASE_DIR/patches"
LOG_DIR="$BASE_DIR/logs"
TAG_DIR="$STATE_DIR/tags"

[[ -d "$TAG_DIR" ]] || mkdir "$TAG_DIR"
[[ -f "$STATE_DIR/dev-commit" ]] || touch "$STATE_DIR/dev-commit"

cd "$GIT_DIR"
$SIMULATE_BUILD git clean -qf > /dev/null 2>&1
$SIMULATE_BUILD git fetch > /dev/null 2>&1

unset LATEST_TAG
for tag in $( git tag | sort -t. -k1,1n -k2,2n -k3,3n ); do
    if [[ ! -f "$TAG_DIR/$tag" ]]; then
        echo "Building new $tag image"
        build "$tag" "$tag" > "$LOG_DIR/$tag.log" 2>&1
        touch "$TAG_DIR/$tag"
        LATEST_TAG="$tag"
    fi
done

if [[ -n "$LATEST_TAG" ]]; then
    $SIMULATE_BUILD docker tag "$IMAGE_NAME:$LATEST_TAG" "$IMAGE_NAME:latest"
    $SIMULATE_BUILD docker push "$IMAGE_NAME:latest"
fi

DEV_REV="$( git log --pretty=oneline -1 origin/dev )"
OLD_DEV_REV="$(< "$STATE_DIR/dev-commit" )"
if [[ "$DEV_REV" != "$OLD_DEV_REV" ]]; then
    echo "Building new dev image"
    build origin/dev dev > "$LOG_DIR/dev-$( date +%Y.%m.%d ).log" 2>&1
    [[ -n "$SIMULATE_BUILD" ]] || echo "$DEV_REV" > "$STATE_DIR/dev-commit"
fi

echo "== Finished at $( date ) ====================="
echo

remove_lock

